# Production settings

# Database JDBC path. For in memory database use
#
#     spring.datasource.url=jdbc:h2:mem:testdb
#
# If you need to connect to it using external tool like IntelliJ use file based database:
#
#     spring.datasource.url=jdbc:h2:file:/path/to/db
#
spring.datasource.url=jdbc:postgresql://localhost/coinblesk

# Logging Settings
# Multiple entries with package path can be used, i.e.
#
#     logging.level.root=ERROR
#     logging.level.com.coinblesk=DEBUG
#     logging.level.org.bitcoinj.Wallet=ALL
#
# Order of log levels:
#
#     ALL > TRACE > DEBUG > INFO > WARN > ERROR > FATAL > OFF
#
logging.level.root=WARN
logging.level.com.coinblesk=INFO

# External URL of backend. Used for links in emails. Example:
#
#     coinblesk.url=https://coinblesk.csg.uzh.ch/
#
coinblesk.url=https://bitcoin.csg.uzh.ch/coinblesk-server/

# Path for saving wallet files and block chain storage
#
#     coinblesk.config.dir=/var/coinblesk
#
coinblesk.config.dir=/var/lib/coinblesk

# Secret for signing the JWT. getBytes() is used for the actual key. Should be long and random for production and short
# and concise for debugging purposes on development. For debugging use: https://jwt.io/#debugger-io
#
#     security.jwt.secret=S_:hXx]a8fq3k&uJwHyhhgXnqqDn<M8pZ+e+|;piLUs\NJ!Yx,'t!#0'Fl_Prq/
#
# In production should be overwritten at start time
# by a command line argument:
#
#     java -jar coinblesk.jar --security.jwt.secret=xxxxxxx
#
# or by an environment variable
#
#     SECURITY_JWT_SECRET=jxxxx java -jar coinblesk.jar
#
security.jwt.secret=

# Validity of JWT in seconds until expiration. The expiration should be short for admin users and longer for users.
#
#     security.jwt.validityInSeconds=604800 (1 week)
#     security.jwt.adminValidityInSeconds=3600 (1 hour)
#
security.jwt.validityInSeconds=604800
security.jwt.adminValidityInSeconds=3600

# The bitcoin net to use by BitcoinJ. Possible values: mainnet, testnet, unittest, regtest
#
#     bitcoin.net=unittest
#
bitcoin.net=mainnet

# The node that we first try to connect to.
#
#     bitcoin.firstSeedNode=bitcoin4-fullnode.csg.uzh.ch
#
bitcoin.firstSeedNode=bitcoin4-fullnode.csg.uzh.ch

# Number blocks for confirmations needed for a transaction.
#
#     bitcoin.minconf=3
#
bitcoin.minconf=3

# Private key for wallet. Set this for development and unit testing.
#
#     bitcoin.potprivkey=97324063353421115888582782536755703931560774174498831848725083330146537953701
#
# In production should be overwritten at start time
# by a command line argument:
#
#     java -jar coinblesk.jar --bitcoin.potprivkey=xxxxxxx
#
# or by an environment variable
#
#     COINBLESK_POTPRIVKEY=jxxxx java -jar coinblesk.jar
#
bitcoin.potprivkey=

# Creation time of the wallet pot in epoch seconds. Used for checkpointing optimization at initial chain download.
#
# bitcoin.potcreationtime=1486638252
#
# Thu, 09 Feb 2017 11:04:12 GMT
bitcoin.potCreationTime=1486638252

# Enable or disable sending of email. Useful for development, since SMTP server might not be available
#
#     email.enabled=true
#
email.enabled=true

# SMTP settings for sending emails
#
#     email.host=localhost
#     email.port=25
#     email.auth=false
#     email.starttls=false
#     email.debug=false
#     email.trust=localhost     (For SSL & self signed certificates, can be set to '*')
#     email.username=
#     email.password=
#
email.host=localhost
email.protocol=smtp
email.port=25
email.auth=false
email.starttls=false
email.debug=false
email.trust=*
email.username=
email.password=

# Admin email address for warning related emails and sender address for activation/password recovery emails.
#
#     email.admin=bocek@ifi.uzh.ch
#     email.sendfrom=bitcoin@csg.uzh.ch
#
email.admin=bocek@ifi.uzh.ch
email.sendfrom=bitcoin@csg.uzh.ch
