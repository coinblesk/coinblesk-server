plugins {
	id 'java'
	id 'org.springframework.boot' version '1.5.2.RELEASE'
	id 'org.hidetake.ssh' version '1.1.5'
}

version = '2.4-SNAPSHOT'

repositories {
	mavenLocal()
	mavenCentral()
}

test {
	testLogging.showStandardStreams = true
	testLogging.exceptionFormat = 'full'
}

/* http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/deployment-install.html
 * this will generate a jar that is executable. It will add a script before the zipped content,
 * thus it will not be a jar anymore. However this, simplifies the deployemnt as only one file
 * has to be copied. For a custom script, use embeddedLaunchScript.
 *
 * systemd / init.d installation in "/etc/systemd/system/":
 * http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/deployment-install.html#deployment-service
 *
 * # [Unit]
 * # Description=coinblesk
 * # After=syslog.target
 *
 * # [Service]
 * # User=nobody
 * # Group=coinblesk
 * # ExecStart=/var/lib/coinblesk/coinblesk.jar
 * # SuccessExitStatus=143
 *
 * # [Install]
 * # WantedBy=multi-user.target
 *
 * Enable with:
 * # systemctl enable coinblesk.service
 *
 * Make sure the directory /var/lib/coinblesk exists
 *
 */
springBoot {
	executable = true
}

jar {
	manifest {
		attributes(
				'Implementation-Version': project.version
		)
	}
}

dependencies {
	// Spring Boot
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-devtools'
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.boot:spring-boot-starter-mail'
	compile 'org.springframework.retry:spring-retry'
	compile 'io.springfox:springfox-swagger-ui:2.6.1'
	compile 'io.springfox:springfox-swagger2:2.6.1'

	// Database drivers
	runtime 'org.postgresql:postgresql'
	runtime 'com.h2database:h2'

	// Shared resources with android client
	// (includes transfer-objects)
	compile 'com.coinblesk:coinblesk-shared-resources:1.4.91'

	compile 'org.knowm.xchange:xchange-bitstamp:4.2.0'

	// Misc
	compile 'org.apache.commons:commons-lang3:3.5'
	compileOnly 'org.projectlombok:lombok:1.16.16'

	// Testing
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.springframework.security:spring-security-test'
}

// gradle run is alias for bootRun
task run(dependsOn: bootRun)

/*
 * To deploy a test the following needs to be in place:
 *
 * - add group coinblesk
 *  # groupadd coinblesk
 *  # adduser USER coinblesk
 *
 * - allow restarting of coinblesk with systemd
 *
 * # %coinblesk ALL=(root)NOPASSWD: /bin/systemctl stop coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /bin/systemctl start coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /bin/systemctl status coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /bin/systemctl restart coinblesk
 *
 * run with:
 * # gradle deploy -Penv=test
 * # gradle deploy -Penv=prod
 * # gradle deploy
 *
 * check logs with:
 * # journalctl -u coinblesk.service -f
 */
task deploy {

	remotes {
		prod {
			host = 'bitcoin3.csg.uzh.ch'
		}
		test {
			host = 'bitcoin2-test.csg.uzh.ch'
		}
	}

	ssh.settings {
		user = "$System.env.USER"
		identity = file("$System.env.HOME/.ssh/id_rsa")
		knownHosts = allowAnyHosts
	}

	doLast {
		ext.upload = { env, archiveName, dst -> ssh.run
				{
					session(remotes."$env") {
						execute 'sudo systemctl stop coinblesk'
						put from: "build/libs/$archiveName", into: dst
						execute "chown -f $System.env.USER:coinblesk $dst; chmod -f ug+x $dst || true"
						execute 'sudo systemctl start coinblesk'
					}
				}
		}
		def dst = '/var/lib/coinblesk/coinblesk.jar'
		if (project.hasProperty('env') && project.getProperty('env') == 'test') {
			println("deploying on TEST...")
			upload('test', jar.archiveName, dst)
		} else if (project.hasProperty('env')  && project.getProperty('env') == 'prod') {
			println("deploying on PROD...")
			upload('prod', jar.archiveName, dst)
		} else {
			println("deploying on LOCAL...")
			exec {
				commandLine "sudo systemctl stop coinblesk && \
                    cp build/libs/$jar.archiveName $dst && \
                    chown $System.env.USER:coinblesk $dst; chmod ug+x $dst && \
                    sudo systemctl start coinblesk"
			}
		}
	}
}
