buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
        classpath("org.hidetake:gradle-ssh-plugin:2.7.0")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.ssh'

version = '2.1-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

/* http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/deployment-install.html
 * this will generate a jar that is executable. It will add a script before the zipped content,
 * thus it will not be a jar anymore. However this, simplifies the deployemnt as only one file
 * has to be copied. For a custom script, use embeddedLaunchScript.
 *
 * systemd / init.d installation: 
 * http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/deployment-install.html#deployment-service
 * 
 * # [Unit]
 * # Description=coinblesk
 * # After=syslog.target
 *
 * # [Service]
 * # User=nobody
 * # Group=coinblesk
 * # ExecStart=/var/coinblesk/coinblesk.jar
 * # SuccessExitStatus=143
 *
 * # [Install]
 * # WantedBy=multi-user.target
 *
 * Enable with:
 * # systemctl enable coinblesk.service
 */

springBoot {
    executable = true
}

dependencies {
    // Spring Boot
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-mail'

    // Database drivers
    runtime 'org.postgresql:postgresql'
    runtime 'com.h2database:h2'

    // Shared resources with android client
    // (includes transfer-objects)
    compile 'com.coinblesk:coinblesk-shared-resources:1.4.71'

    // Misc
    compile 'org.apache.commons:commons-lang3:3.5'

    // Testing
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.springframework.security:spring-security-test"
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.2.1'
    testCompile 'org.dbunit:dbunit:2.5.1'
}

remotes {
    prod {
        host = 'bitcoin3.csg.uzh.ch'
        user = "$System.env.USER"
        identity = file("$System.env.HOME/.ssh/id_rsa")
    }
    test {
        host = 'bitcoin2-test.csg.uzh.ch'
        user = "$System.env.USER"
        identity = file("$System.env.HOME/.ssh/id_rsa")
    }
    local {
        host = 'localhost'
        user = "$System.env.USER"
        identity = file("$System.env.HOME/.ssh/id_rsa")
    }
}

/*
 * To deploy a test the following needs to be in place:
 * 
 * - add group coinblesk
 *  # groupadd coinblesk
 *  # adduser USER coinblesk
 *  
 * - allow restarting of coinblesk with systemd
 * 
 * # %coinblesk ALL=(root)NOPASSWD: /usr/bin/systemctl stop coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /usr/bin/systemctl start coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /usr/bin/systemctl status coinblesk
 * # %coinblesk ALL=(root)NOPASSWD: /usr/bin/systemctl restart coinblesk
 * 
 */
task deployCoinblesk << {
    def env = 'local'
    if (project.hasProperty('env') && project.getProperty('env') == 'prod') {
        env = 'prod'
    } else if (project.hasProperty('env') && project.getProperty('env') == 'test') {
        env = 'test'
    }
    println("deploying on $env")
    ssh.run {
        session(remotes."$env") {
            execute 'sudo systemctl stop coinblesk'
            put from: ssh.runtime.jar, into: '/var/coinblesk/coinblesk.jar'
            execute 'sudo systemctl start coinblesk'
        }
    }
}